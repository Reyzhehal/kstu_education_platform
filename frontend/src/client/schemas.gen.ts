// This file is auto-generated by @hey-api/openapi-ts

export const Body_login_login_access_tokenSchema = {
    properties: {
        grant_type: {
            anyOf: [
                {
                    type: 'string',
                    pattern: 'password'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Grant Type'
        },
        username: {
            type: 'string',
            title: 'Username'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        scope: {
            type: 'string',
            title: 'Scope',
            default: ''
        },
        client_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Id'
        },
        client_secret: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Secret'
        }
    },
    type: 'object',
    required: ['username', 'password'],
    title: 'Body_login-login_access_token'
} as const;

export const Body_users_upload_avatar_meSchema = {
    properties: {
        file: {
            type: 'string',
            format: 'binary',
            title: 'File'
        }
    },
    type: 'object',
    required: ['file'],
    title: 'Body_users-upload_avatar_me'
} as const;

export const Body_users_upload_cover_meSchema = {
    properties: {
        file: {
            type: 'string',
            format: 'binary',
            title: 'File'
        }
    },
    type: 'object',
    required: ['file'],
    title: 'Body_users-upload_cover_me'
} as const;

export const CategoriesPublicSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/CategoryPublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'CategoriesPublic'
} as const;

export const CategoryPublicSchema = {
    properties: {
        name: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Name'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['name', 'id'],
    title: 'CategoryPublic'
} as const;

export const CoursePublicSchema = {
    properties: {
        title: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Title'
        },
        cover_image: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Cover Image'
        },
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 4000
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        description_video: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description Video'
        },
        hours_week: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Hours Week'
        },
        hours_total: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Hours Total'
        },
        has_certificate: {
            type: 'boolean',
            title: 'Has Certificate',
            default: false
        },
        difficulty_level: {
            '$ref': '#/components/schemas/DifficultyLevel',
            default: 1
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        datetime_create: {
            type: 'string',
            format: 'date-time',
            title: 'Datetime Create'
        },
        datetime_update: {
            type: 'string',
            format: 'date-time',
            title: 'Datetime Update'
        },
        author_id: {
            type: 'string',
            format: 'uuid',
            title: 'Author Id'
        },
        language_id: {
            type: 'integer',
            title: 'Language Id'
        },
        category_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Category Id'
        },
        subcategory_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Subcategory Id'
        },
        is_favorite: {
            type: 'boolean',
            title: 'Is Favorite',
            default: false
        },
        students_count: {
            type: 'integer',
            title: 'Students Count',
            default: 0
        },
        is_enrolled: {
            type: 'boolean',
            title: 'Is Enrolled',
            default: false
        }
    },
    type: 'object',
    required: ['title', 'id', 'datetime_create', 'datetime_update', 'author_id', 'language_id'],
    title: 'CoursePublic'
} as const;

export const CoursesPublicSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/CoursePublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'CoursesPublic'
} as const;

export const DifficultyLevelSchema = {
    type: 'integer',
    enum: [1, 2, 3],
    title: 'DifficultyLevel'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const LanguagePublicSchema = {
    properties: {
        name: {
            type: 'string',
            maxLength: 20,
            title: 'Name'
        },
        code: {
            type: 'string',
            maxLength: 2,
            title: 'Code'
        },
        id: {
            type: 'integer',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['name', 'code', 'id'],
    title: 'LanguagePublic'
} as const;

export const LanguagesPublicSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/LanguagePublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'LanguagesPublic'
} as const;

export const MessageSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        }
    },
    type: 'object',
    required: ['message'],
    title: 'Message'
} as const;

export const MetaCategoriesWithChildrenPublicSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/MetaCategoryWithSubcategoriesPublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'MetaCategoriesWithChildrenPublic'
} as const;

export const MetaCategoryWithSubcategoriesPublicSchema = {
    properties: {
        name: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Name'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        category_id: {
            type: 'string',
            format: 'uuid',
            title: 'Category Id'
        },
        subcategories: {
            items: {
                '$ref': '#/components/schemas/SubcategoryPublic'
            },
            type: 'array',
            title: 'Subcategories',
            default: []
        }
    },
    type: 'object',
    required: ['name', 'id', 'category_id'],
    title: 'MetaCategoryWithSubcategoriesPublic'
} as const;

export const NewPasswordSchema = {
    properties: {
        token: {
            type: 'string',
            title: 'Token'
        },
        new_password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'New Password'
        }
    },
    type: 'object',
    required: ['token', 'new_password'],
    title: 'NewPassword'
} as const;

export const PrivateUserCreateSchema = {
    properties: {
        email: {
            type: 'string',
            title: 'Email'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        full_name: {
            type: 'string',
            title: 'Full Name'
        },
        is_verified: {
            type: 'boolean',
            title: 'Is Verified',
            default: false
        }
    },
    type: 'object',
    required: ['email', 'password', 'full_name'],
    title: 'PrivateUserCreate'
} as const;

export const SetLanguageSchema = {
    properties: {
        language_id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Language Id'
        }
    },
    type: 'object',
    title: 'SetLanguage'
} as const;

export const SubcategoryPublicSchema = {
    properties: {
        name: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Name'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        category_id: {
            type: 'string',
            format: 'uuid',
            title: 'Category Id'
        },
        meta_category_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Meta Category Id'
        }
    },
    type: 'object',
    required: ['name', 'id', 'category_id'],
    title: 'SubcategoryPublic'
} as const;

export const TokenSchema = {
    properties: {
        access_token: {
            type: 'string',
            title: 'Access Token'
        },
        token_type: {
            type: 'string',
            title: 'Token Type',
            default: 'bearer'
        }
    },
    type: 'object',
    required: ['access_token'],
    title: 'Token'
} as const;

export const UpdatePasswordSchema = {
    properties: {
        current_password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'Current Password'
        },
        new_password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'New Password'
        }
    },
    type: 'object',
    required: ['current_password', 'new_password'],
    title: 'UpdatePassword'
} as const;

export const UserCreateSchema = {
    properties: {
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'Password'
        }
    },
    type: 'object',
    required: ['email', 'password'],
    title: 'UserCreate'
} as const;

export const UserPublicSchema = {
    properties: {
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        language_id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Language Id'
        },
        username: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Username'
        },
        is_staff: {
            type: 'boolean',
            title: 'Is Staff',
            default: false
        },
        is_teacher: {
            type: 'boolean',
            title: 'Is Teacher',
            default: false
        },
        first_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'First Name'
        },
        last_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        description_short: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description Short'
        },
        is_profile_private: {
            type: 'boolean',
            title: 'Is Profile Private',
            default: false
        },
        avatar_image: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Avatar Image'
        },
        cover_image: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Cover Image'
        },
        city: {
            type: 'string',
            title: 'City',
            default: 'Bishkek'
        },
        date_joined: {
            type: 'string',
            format: 'date-time',
            title: 'Date Joined'
        }
    },
    type: 'object',
    required: ['email', 'id', 'date_joined'],
    title: 'UserPublic'
} as const;

export const UserRegisterSchema = {
    properties: {
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email'
        },
        password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'Password'
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        }
    },
    type: 'object',
    required: ['email', 'password'],
    title: 'UserRegister'
} as const;

export const UserUpdateSchema = {
    properties: {
        email: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        password: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 40,
                    minLength: 8
                },
                {
                    type: 'null'
                }
            ],
            title: 'Password'
        },
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 2000
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        description_short: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description Short'
        },
        city: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 30
                },
                {
                    type: 'null'
                }
            ],
            title: 'City'
        }
    },
    type: 'object',
    title: 'UserUpdate'
} as const;

export const UserUpdateMeSchema = {
    properties: {
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        email: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        city: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 30
                },
                {
                    type: 'null'
                }
            ],
            title: 'City'
        },
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 2000
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        description_short: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description Short'
        }
    },
    type: 'object',
    title: 'UserUpdateMe'
} as const;

export const UsersPublicSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/UserPublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'UsersPublic'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;