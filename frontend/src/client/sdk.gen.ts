// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { CategoriesReadCategoriesData, CategoriesReadCategoriesResponse, CategoriesReadMetaCategoriesByCategoryData, CategoriesReadMetaCategoriesByCategoryResponse, CoursesCreateCourseData, CoursesCreateCourseResponse, CoursesReadCoursesData, CoursesReadCoursesResponse, CoursesReadFavoriteCoursesData, CoursesReadFavoriteCoursesResponse, CoursesReadMyCoursesData, CoursesReadMyCoursesResponse, CoursesReadAuthorCoursesData, CoursesReadAuthorCoursesResponse, CoursesPublishCourseData, CoursesPublishCourseResponse, CoursesReadCourseByIdData, CoursesReadCourseByIdResponse, CoursesUpdateCourseData, CoursesUpdateCourseResponse, CoursesAddToFavoritesData, CoursesAddToFavoritesResponse, CoursesRemoveFromFavoritesData, CoursesRemoveFromFavoritesResponse, CoursesEnrollCourseData, CoursesEnrollCourseResponse, CoursesUnenrollCourseData, CoursesUnenrollCourseResponse, CoursesReadCourseLearnLinesData, CoursesReadCourseLearnLinesResponse, CoursesReadCourseDescriptionBlocksData, CoursesReadCourseDescriptionBlocksResponse, LanguagesReadLanguagesData, LanguagesReadLanguagesResponse, ModulesReadLessonByIdData, ModulesReadLessonByIdResponse, ModulesUpdateLessonByIdData, ModulesUpdateLessonByIdResponse, ModulesUploadLessonCoverData, ModulesUploadLessonCoverResponse, ModulesDeleteLessonCoverData, ModulesDeleteLessonCoverResponse, LoginLoginAccessTokenData, LoginLoginAccessTokenResponse, LoginRefreshAccessTokenData, LoginRefreshAccessTokenResponse, LoginRevokeRefreshTokenData, LoginRevokeRefreshTokenResponse, LoginTestTokenResponse, LoginRecoverPasswordData, LoginRecoverPasswordResponse, LoginResetPasswordData, LoginResetPasswordResponse, LoginRecoverPasswordHtmlContentData, LoginRecoverPasswordHtmlContentResponse, ModulesReadCourseModulesData, ModulesReadCourseModulesResponse, ModulesCreateModuleData, ModulesCreateModuleResponse, ModulesUpdateModuleData, ModulesUpdateModuleResponse, ModulesDeleteModuleData, ModulesDeleteModuleResponse, ModulesCreateLessonData, ModulesCreateLessonResponse, ModulesUpdateLessonData, ModulesUpdateLessonResponse, ModulesDeleteLessonData, ModulesDeleteLessonResponse, PrivateCreateUserData, PrivateCreateUserResponse, StepsReadLessonStepsData, StepsReadLessonStepsResponse, StepsCreateStepData, StepsCreateStepResponse, StepsReadStepData, StepsReadStepResponse, StepsUpdateStepData, StepsUpdateStepResponse, StepsDeleteStepData, StepsDeleteStepResponse, UsersReadUsersData, UsersReadUsersResponse, UsersCreateUserData, UsersCreateUserResponse, UsersReadUserMeResponse, UsersDeleteUserMeResponse, UsersUpdateUserMeData, UsersUpdateUserMeResponse, UsersUpdatePasswordMeData, UsersUpdatePasswordMeResponse, UsersSetLanguageMeData, UsersSetLanguageMeResponse, UsersRegisterUserData, UsersRegisterUserResponse, UsersReadUserByIdData, UsersReadUserByIdResponse, UsersUpdateUserData, UsersUpdateUserResponse, UsersDeleteUserData, UsersDeleteUserResponse, UsersUploadAvatarMeData, UsersUploadAvatarMeResponse, UsersDeleteAvatarMeResponse, UsersUploadCoverMeData, UsersUploadCoverMeResponse, UsersDeleteCoverMeResponse, UtilsTestEmailData, UtilsTestEmailResponse, UtilsHealthCheckResponse } from './types.gen';

export class CategoriesService {
    /**
     * Read Categories
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns CategoriesPublic Successful Response
     * @throws ApiError
     */
    public static readCategories(data: CategoriesReadCategoriesData = {}): CancelablePromise<CategoriesReadCategoriesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/categories/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Meta Categories By Category
     * @param data The data for the request.
     * @param data.categoryId
     * @param data.skip
     * @param data.limit
     * @returns MetaCategoriesWithChildrenPublic Successful Response
     * @throws ApiError
     */
    public static readMetaCategoriesByCategory(data: CategoriesReadMetaCategoriesByCategoryData): CancelablePromise<CategoriesReadMetaCategoriesByCategoryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/categories/{category_id}/meta-categories',
            path: {
                category_id: data.categoryId
            },
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class CoursesService {
    /**
     * Create Course
     * Создать новый курс. Курс создается как черновик с минимальными данными.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns CoursePublic Successful Response
     * @throws ApiError
     */
    public static createCourse(data: CoursesCreateCourseData): CancelablePromise<CoursesCreateCourseResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/courses/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Courses
     * Получить список курсов с фильтрами по категории, подкатегории и текстовому поиску
     * по полям title и description. Поддерживает пагинацию.
     * Только опубликованные курсы.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @param data.categoryId
     * @param data.subcategoryId
     * @param data.metaCategoryId
     * @param data.languageId
     * @param data.difficultyLevel
     * @param data.q
     * @returns CoursesPublic Successful Response
     * @throws ApiError
     */
    public static readCourses(data: CoursesReadCoursesData = {}): CancelablePromise<CoursesReadCoursesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/courses/',
            query: {
                skip: data.skip,
                limit: data.limit,
                category_id: data.categoryId,
                subcategory_id: data.subcategoryId,
                meta_category_id: data.metaCategoryId,
                language_id: data.languageId,
                difficulty_level: data.difficultyLevel,
                q: data.q
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Favorite Courses
     * Получить список избранных курсов текущего пользователя
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns CoursesPublic Successful Response
     * @throws ApiError
     */
    public static readFavoriteCourses(data: CoursesReadFavoriteCoursesData = {}): CancelablePromise<CoursesReadFavoriteCoursesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/courses/favorites',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read My Courses
     * Курсы, на которые записан текущий пользователь
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns CoursesPublic Successful Response
     * @throws ApiError
     */
    public static readMyCourses(data: CoursesReadMyCoursesData = {}): CancelablePromise<CoursesReadMyCoursesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/courses/progress',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Author Courses
     * Курсы, созданные текущим пользователем (где он автор)
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns CoursesPublic Successful Response
     * @throws ApiError
     */
    public static readAuthorCourses(data: CoursesReadAuthorCoursesData = {}): CancelablePromise<CoursesReadAuthorCoursesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/courses/author',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Publish Course
     * Опубликовать курс. Только автор может публиковать.
     * @param data The data for the request.
     * @param data.courseId
     * @returns string Successful Response
     * @throws ApiError
     */
    public static publishCourse(data: CoursesPublishCourseData): CancelablePromise<CoursesPublishCourseResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/courses/{course_id}/publish',
            path: {
                course_id: data.courseId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Course By Id
     * @param data The data for the request.
     * @param data.courseId
     * @returns CoursePublic Successful Response
     * @throws ApiError
     */
    public static readCourseById(data: CoursesReadCourseByIdData): CancelablePromise<CoursesReadCourseByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/courses/{course_id}',
            path: {
                course_id: data.courseId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Course
     * Обновить курс. Только автор может обновлять.
     * @param data The data for the request.
     * @param data.courseId
     * @param data.requestBody
     * @returns CoursePublic Successful Response
     * @throws ApiError
     */
    public static updateCourse(data: CoursesUpdateCourseData): CancelablePromise<CoursesUpdateCourseResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/courses/{course_id}',
            path: {
                course_id: data.courseId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Add To Favorites
     * Добавить курс в избранное
     * @param data The data for the request.
     * @param data.courseId
     * @returns string Successful Response
     * @throws ApiError
     */
    public static addToFavorites(data: CoursesAddToFavoritesData): CancelablePromise<CoursesAddToFavoritesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/courses/{course_id}/favorite',
            path: {
                course_id: data.courseId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Remove From Favorites
     * Удалить курс из избранного
     * @param data The data for the request.
     * @param data.courseId
     * @returns string Successful Response
     * @throws ApiError
     */
    public static removeFromFavorites(data: CoursesRemoveFromFavoritesData): CancelablePromise<CoursesRemoveFromFavoritesResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/courses/{course_id}/favorite',
            path: {
                course_id: data.courseId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Enroll Course
     * Записаться на курс
     * @param data The data for the request.
     * @param data.courseId
     * @returns string Successful Response
     * @throws ApiError
     */
    public static enrollCourse(data: CoursesEnrollCourseData): CancelablePromise<CoursesEnrollCourseResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/courses/{course_id}/enroll',
            path: {
                course_id: data.courseId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Unenroll Course
     * Отписаться от курса
     * @param data The data for the request.
     * @param data.courseId
     * @returns string Successful Response
     * @throws ApiError
     */
    public static unenrollCourse(data: CoursesUnenrollCourseData): CancelablePromise<CoursesUnenrollCourseResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/courses/{course_id}/enroll',
            path: {
                course_id: data.courseId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Course Learn Lines
     * Вернуть список CourseDescriptionLine.text для курса
     * @param data The data for the request.
     * @param data.courseId
     * @returns string Successful Response
     * @throws ApiError
     */
    public static readCourseLearnLines(data: CoursesReadCourseLearnLinesData): CancelablePromise<CoursesReadCourseLearnLinesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/courses/{course_id}/learn',
            path: {
                course_id: data.courseId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Course Description Blocks
     * Вернуть список CourseDescriptionBlock для курса (title, text)
     * @param data The data for the request.
     * @param data.courseId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static readCourseDescriptionBlocks(data: CoursesReadCourseDescriptionBlocksData): CancelablePromise<CoursesReadCourseDescriptionBlocksResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/courses/{course_id}/blocks',
            path: {
                course_id: data.courseId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class LanguagesService {
    /**
     * Read Languages
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns LanguagesPublic Successful Response
     * @throws ApiError
     */
    public static readLanguages(data: LanguagesReadLanguagesData = {}): CancelablePromise<LanguagesReadLanguagesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/languages/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class LessonsService {
    /**
     * Read Lesson By Id
     * Получить урок по ID. Доступно авторизованным пользователям.
     * @param data The data for the request.
     * @param data.lessonId
     * @returns LessonPublic Successful Response
     * @throws ApiError
     */
    public static modulesReadLessonById(data: ModulesReadLessonByIdData): CancelablePromise<ModulesReadLessonByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/courses/{course_id}/modules/lessons/{lesson_id}',
            path: {
                lesson_id: data.lessonId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Lesson By Id
     * Обновить урок по ID. Только автор курса может обновлять.
     * @param data The data for the request.
     * @param data.lessonId
     * @param data.requestBody
     * @returns LessonPublic Successful Response
     * @throws ApiError
     */
    public static modulesUpdateLessonById(data: ModulesUpdateLessonByIdData): CancelablePromise<ModulesUpdateLessonByIdResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/courses/{course_id}/modules/lessons/{lesson_id}',
            path: {
                lesson_id: data.lessonId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Upload Lesson Cover
     * Загрузить обложку урока. Принимает image/jpeg, image/png, image/webp.
     * Только автор курса может загружать обложку.
     * @param data The data for the request.
     * @param data.lessonId
     * @param data.formData
     * @returns LessonPublic Successful Response
     * @throws ApiError
     */
    public static modulesUploadLessonCover(data: ModulesUploadLessonCoverData): CancelablePromise<ModulesUploadLessonCoverResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/courses/{course_id}/modules/lessons/{lesson_id}/cover',
            path: {
                lesson_id: data.lessonId
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Lesson Cover
     * Удалить обложку урока. Только автор курса может удалять.
     * @param data The data for the request.
     * @param data.lessonId
     * @returns LessonPublic Successful Response
     * @throws ApiError
     */
    public static modulesDeleteLessonCover(data: ModulesDeleteLessonCoverData): CancelablePromise<ModulesDeleteLessonCoverResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/courses/{course_id}/modules/lessons/{lesson_id}/cover',
            path: {
                lesson_id: data.lessonId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class LoginService {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access and refresh token for future requests
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static loginAccessToken(data: LoginLoginAccessTokenData): CancelablePromise<LoginLoginAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/access-token',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Refresh Access Token
     * Обновить access token используя refresh token
     * @param data The data for the request.
     * @param data.refreshToken
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static refreshAccessToken(data: LoginRefreshAccessTokenData): CancelablePromise<LoginRefreshAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/refresh-token',
            query: {
                refresh_token: data.refreshToken
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Revoke Refresh Token
     * Отозвать (revoke) refresh token (например, при logout)
     * @param data The data for the request.
     * @param data.refreshToken
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static revokeRefreshToken(data: LoginRevokeRefreshTokenData): CancelablePromise<LoginRevokeRefreshTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/revoke-token',
            query: {
                refresh_token: data.refreshToken
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Test Token
     * Test access token
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static testToken(): CancelablePromise<LoginTestTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/test-token'
        });
    }
    
    /**
     * Recover Password
     * Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static recoverPassword(data: LoginRecoverPasswordData): CancelablePromise<LoginRecoverPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reset Password
     * Reset password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static resetPassword(data: LoginResetPasswordData): CancelablePromise<LoginResetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/reset-password/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Recover Password Html Content
     * HTML Content for Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns string Successful Response
     * @throws ApiError
     */
    public static recoverPasswordHtmlContent(data: LoginRecoverPasswordHtmlContentData): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery-html-content/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class ModulesService {
    /**
     * Read Course Modules
     * Получить все модули курса с уроками, отсортированные по position
     * @param data The data for the request.
     * @param data.courseId
     * @returns ModuleWithLessons Successful Response
     * @throws ApiError
     */
    public static readCourseModules(data: ModulesReadCourseModulesData): CancelablePromise<ModulesReadCourseModulesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/courses/{course_id}/modules/',
            path: {
                course_id: data.courseId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Module
     * Создать новый модуль в курсе. Только автор курса может создавать модули.
     * @param data The data for the request.
     * @param data.courseId
     * @param data.requestBody
     * @returns ModulePublic Successful Response
     * @throws ApiError
     */
    public static createModule(data: ModulesCreateModuleData): CancelablePromise<ModulesCreateModuleResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/courses/{course_id}/modules/',
            path: {
                course_id: data.courseId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Module
     * Обновить модуль. Только автор курса может обновлять.
     * @param data The data for the request.
     * @param data.courseId
     * @param data.moduleId
     * @param data.requestBody
     * @returns ModulePublic Successful Response
     * @throws ApiError
     */
    public static updateModule(data: ModulesUpdateModuleData): CancelablePromise<ModulesUpdateModuleResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/courses/{course_id}/modules/{module_id}',
            path: {
                course_id: data.courseId,
                module_id: data.moduleId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Module
     * Удалить модуль. Только автор курса может удалять.
     * @param data The data for the request.
     * @param data.courseId
     * @param data.moduleId
     * @returns string Successful Response
     * @throws ApiError
     */
    public static deleteModule(data: ModulesDeleteModuleData): CancelablePromise<ModulesDeleteModuleResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/courses/{course_id}/modules/{module_id}',
            path: {
                course_id: data.courseId,
                module_id: data.moduleId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Lesson
     * Создать новый урок в модуле. Только автор курса может создавать уроки.
     * @param data The data for the request.
     * @param data.courseId
     * @param data.moduleId
     * @param data.requestBody
     * @returns LessonPublic Successful Response
     * @throws ApiError
     */
    public static createLesson(data: ModulesCreateLessonData): CancelablePromise<ModulesCreateLessonResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/courses/{course_id}/modules/{module_id}/lessons',
            path: {
                course_id: data.courseId,
                module_id: data.moduleId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Lesson
     * Обновить урок. Только автор курса может обновлять.
     * @param data The data for the request.
     * @param data.courseId
     * @param data.moduleId
     * @param data.lessonId
     * @param data.requestBody
     * @returns LessonPublic Successful Response
     * @throws ApiError
     */
    public static updateLesson(data: ModulesUpdateLessonData): CancelablePromise<ModulesUpdateLessonResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/courses/{course_id}/modules/{module_id}/lessons/{lesson_id}',
            path: {
                course_id: data.courseId,
                module_id: data.moduleId,
                lesson_id: data.lessonId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Lesson
     * Удалить урок. Только автор курса может удалять.
     * @param data The data for the request.
     * @param data.courseId
     * @param data.moduleId
     * @param data.lessonId
     * @returns string Successful Response
     * @throws ApiError
     */
    public static deleteLesson(data: ModulesDeleteLessonData): CancelablePromise<ModulesDeleteLessonResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/courses/{course_id}/modules/{module_id}/lessons/{lesson_id}',
            path: {
                course_id: data.courseId,
                module_id: data.moduleId,
                lesson_id: data.lessonId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Lesson By Id
     * Получить урок по ID. Доступно авторизованным пользователям.
     * @param data The data for the request.
     * @param data.lessonId
     * @returns LessonPublic Successful Response
     * @throws ApiError
     */
    public static readLessonById(data: ModulesReadLessonByIdData): CancelablePromise<ModulesReadLessonByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/courses/{course_id}/modules/lessons/{lesson_id}',
            path: {
                lesson_id: data.lessonId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Lesson By Id
     * Обновить урок по ID. Только автор курса может обновлять.
     * @param data The data for the request.
     * @param data.lessonId
     * @param data.requestBody
     * @returns LessonPublic Successful Response
     * @throws ApiError
     */
    public static updateLessonById(data: ModulesUpdateLessonByIdData): CancelablePromise<ModulesUpdateLessonByIdResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/courses/{course_id}/modules/lessons/{lesson_id}',
            path: {
                lesson_id: data.lessonId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Upload Lesson Cover
     * Загрузить обложку урока. Принимает image/jpeg, image/png, image/webp.
     * Только автор курса может загружать обложку.
     * @param data The data for the request.
     * @param data.lessonId
     * @param data.formData
     * @returns LessonPublic Successful Response
     * @throws ApiError
     */
    public static uploadLessonCover(data: ModulesUploadLessonCoverData): CancelablePromise<ModulesUploadLessonCoverResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/courses/{course_id}/modules/lessons/{lesson_id}/cover',
            path: {
                lesson_id: data.lessonId
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Lesson Cover
     * Удалить обложку урока. Только автор курса может удалять.
     * @param data The data for the request.
     * @param data.lessonId
     * @returns LessonPublic Successful Response
     * @throws ApiError
     */
    public static deleteLessonCover(data: ModulesDeleteLessonCoverData): CancelablePromise<ModulesDeleteLessonCoverResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/courses/{course_id}/modules/lessons/{lesson_id}/cover',
            path: {
                lesson_id: data.lessonId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class PrivateService {
    /**
     * Create User
     * Create a new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: PrivateCreateUserData): CancelablePromise<PrivateCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/private/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class StepsService {
    /**
     * Read Lesson Steps
     * Получить все шаги урока, отсортированные по position
     * @param data The data for the request.
     * @param data.lessonId
     * @returns StepPublic Successful Response
     * @throws ApiError
     */
    public static readLessonSteps(data: StepsReadLessonStepsData): CancelablePromise<StepsReadLessonStepsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/lessons/{lesson_id}/steps/',
            path: {
                lesson_id: data.lessonId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Step
     * Создать новый шаг в уроке. Только автор курса может создавать шаги.
     * @param data The data for the request.
     * @param data.lessonId
     * @param data.requestBody
     * @returns StepPublic Successful Response
     * @throws ApiError
     */
    public static createStep(data: StepsCreateStepData): CancelablePromise<StepsCreateStepResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/lessons/{lesson_id}/steps/',
            path: {
                lesson_id: data.lessonId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Step
     * Получить шаг по ID
     * @param data The data for the request.
     * @param data.lessonId
     * @param data.stepId
     * @returns StepPublic Successful Response
     * @throws ApiError
     */
    public static readStep(data: StepsReadStepData): CancelablePromise<StepsReadStepResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/lessons/{lesson_id}/steps/{step_id}',
            path: {
                lesson_id: data.lessonId,
                step_id: data.stepId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Step
     * Обновить шаг. Только автор курса может обновлять шаги.
     * @param data The data for the request.
     * @param data.lessonId
     * @param data.stepId
     * @param data.requestBody
     * @returns StepPublic Successful Response
     * @throws ApiError
     */
    public static updateStep(data: StepsUpdateStepData): CancelablePromise<StepsUpdateStepResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/lessons/{lesson_id}/steps/{step_id}',
            path: {
                lesson_id: data.lessonId,
                step_id: data.stepId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Step
     * Удалить шаг. Только автор курса может удалять шаги.
     * @param data The data for the request.
     * @param data.lessonId
     * @param data.stepId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteStep(data: StepsDeleteStepData): CancelablePromise<StepsDeleteStepResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/lessons/{lesson_id}/steps/{step_id}',
            path: {
                lesson_id: data.lessonId,
                step_id: data.stepId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class UsersService {
    /**
     * Read Users
     * Retrieve users.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UsersPublic Successful Response
     * @throws ApiError
     */
    public static readUsers(data: UsersReadUsersData = {}): CancelablePromise<UsersReadUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User
     * Create new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: UsersCreateUserData): CancelablePromise<UsersCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User Me
     * Get current user.
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Delete User Me
     * Delete own user.
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Update User Me
     * Update own user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUserMe(data: UsersUpdateUserMeData): CancelablePromise<UsersUpdateUserMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Password Me
     * Update own password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static updatePasswordMe(data: UsersUpdatePasswordMeData): CancelablePromise<UsersUpdatePasswordMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me/password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Set Language Me
     * Set own language by id or code. Pass either language_id or code. Pass null to unset.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static setLanguageMe(data: UsersSetLanguageMeData): CancelablePromise<UsersSetLanguageMeResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/me/language',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Register User
     * Create new user without the need to be logged in.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static registerUser(data: UsersRegisterUserData): CancelablePromise<UsersRegisterUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/signup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User By Id
     * Get a specific user by id.
     * @param data The data for the request.
     * @param data.userId
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserById(data: UsersReadUserByIdData): CancelablePromise<UsersReadUserByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User
     * Update a user.
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUser(data: UsersUpdateUserData): CancelablePromise<UsersUpdateUserResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User
     * Delete a user.
     * @param data The data for the request.
     * @param data.userId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUser(data: UsersDeleteUserData): CancelablePromise<UsersDeleteUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Upload Avatar Me
     * Upload and set current user's avatar. Accepts image/jpeg, image/png, image/webp.
     * Returns updated user.
     * @param data The data for the request.
     * @param data.formData
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static uploadAvatarMe(data: UsersUploadAvatarMeData): CancelablePromise<UsersUploadAvatarMeResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/me/avatar',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Avatar Me
     * Delete current user's avatar.
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static deleteAvatarMe(): CancelablePromise<UsersDeleteAvatarMeResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/me/avatar'
        });
    }
    
    /**
     * Upload Cover Me
     * Upload and set current user's cover image. Accepts image/jpeg, image/png, image/webp.
     * Returns updated user.
     * @param data The data for the request.
     * @param data.formData
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static uploadCoverMe(data: UsersUploadCoverMeData): CancelablePromise<UsersUploadCoverMeResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/me/cover',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Cover Me
     * Delete current user's cover image.
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static deleteCoverMe(): CancelablePromise<UsersDeleteCoverMeResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/me/cover'
        });
    }
}

export class UtilsService {
    /**
     * Test Email
     * Test emails.
     * @param data The data for the request.
     * @param data.emailTo
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static testEmail(data: UtilsTestEmailData): CancelablePromise<UtilsTestEmailResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/test-email/',
            query: {
                email_to: data.emailTo
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Health Check
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/health-check/'
        });
    }
}