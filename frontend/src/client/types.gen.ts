// This file is auto-generated by @hey-api/openapi-ts

export type Body_content_upload_content_image = {
    file: (Blob | File);
};

export type Body_courses_upload_course_cover = {
    file: (Blob | File);
};

export type Body_lessons_upload_lesson_cover = {
    file: (Blob | File);
};

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type Body_users_upload_avatar_me = {
    file: (Blob | File);
};

export type Body_users_upload_cover_me = {
    file: (Blob | File);
};

export type CategoriesPublic = {
    data: Array<CategoryPublic>;
    count: number;
};

export type CategoryPublic = {
    name: string;
    id: string;
};

export type CourseCreate = {
    title: string;
};

export type CoursePublic = {
    title: string;
    cover_image?: (string | null);
    description?: (string | null);
    description_video?: (string | null);
    short_description?: (string | null);
    what_you_will_learn?: (string | null);
    target_audience?: (string | null);
    requirements?: (string | null);
    how_it_works?: (string | null);
    what_you_get?: (string | null);
    hours_week?: (number | null);
    hours_total?: (number | null);
    has_certificate?: boolean;
    difficulty_level?: DifficultyLevel;
    is_published?: boolean;
    id: string;
    datetime_create: string;
    datetime_update: string;
    author_id: string;
    language_id: number;
    category_id?: (string | null);
    subcategory_id?: (string | null);
    is_favorite?: boolean;
    students_count?: number;
    is_enrolled?: boolean;
};

export type CoursesPublic = {
    data: Array<CoursePublic>;
    count: number;
};

export type CourseUpdate = {
    title?: (string | null);
    cover_image?: (string | null);
    description?: (string | null);
    description_video?: (string | null);
    short_description?: (string | null);
    what_you_will_learn?: (string | null);
    target_audience?: (string | null);
    requirements?: (string | null);
    how_it_works?: (string | null);
    what_you_get?: (string | null);
    hours_week?: (number | null);
    hours_total?: (number | null);
    has_certificate?: (boolean | null);
    difficulty_level?: (DifficultyLevel | null);
    language_id?: (number | null);
    category_id?: (string | null);
    subcategory_id?: (string | null);
};

export type DifficultyLevel = 1 | 2 | 3;

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type LanguagePublic = {
    name: string;
    code: string;
    id: number;
};

export type LanguagesPublic = {
    data: Array<LanguagePublic>;
    count: number;
};

export type LessonCreate = {
    title: string;
    cover_image?: (string | null);
    language_id?: (number | null);
    allow_comments?: boolean;
    position?: number;
};

export type LessonPublic = {
    title: string;
    cover_image?: (string | null);
    language_id?: (number | null);
    allow_comments?: boolean;
    position?: number;
    id: string;
    module_id: string;
};

export type LessonUpdate = {
    title?: (string | null);
    cover_image?: (string | null);
    language_id?: (number | null);
    allow_comments?: (boolean | null);
    position?: (number | null);
};

export type Message = {
    message: string;
};

export type MetaCategoriesWithChildrenPublic = {
    data: Array<MetaCategoryWithSubcategoriesPublic>;
    count: number;
};

export type MetaCategoryWithSubcategoriesPublic = {
    name: string;
    id: string;
    category_id: string;
    subcategories?: Array<SubcategoryPublic>;
};

export type ModuleCreate = {
    title: string;
    description?: (string | null);
    position?: number;
};

export type ModulePublic = {
    title: string;
    description?: (string | null);
    position?: number;
    id: string;
    course_id: string;
};

export type ModuleUpdate = {
    title?: (string | null);
    description?: (string | null);
    position?: (number | null);
};

export type ModuleWithLessons = {
    title: string;
    description?: (string | null);
    position?: number;
    id: string;
    course_id: string;
    lessons?: Array<LessonPublic>;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type PrivateUserCreate = {
    email: string;
    password: string;
    first_name?: (string | null);
    last_name?: (string | null);
    is_verified?: boolean;
};

export type SetLanguage = {
    language_id?: (number | null);
};

export type StepCreate = {
    title?: (string | null);
    step_type?: StepType;
    position?: number;
    content?: {
        [key: string]: unknown;
    };
};

export type StepPublic = {
    title?: (string | null);
    step_type?: StepType;
    position?: number;
    id: string;
    lesson_id: string;
    content?: {
        [key: string]: unknown;
    };
};

export type StepType = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14;

export type StepUpdate = {
    title?: (string | null);
    step_type?: (StepType | null);
    position?: (number | null);
    content?: ({
    [key: string]: unknown;
} | null);
};

export type SubcategoryPublic = {
    name: string;
    id: string;
    category_id: string;
    meta_category_id?: (string | null);
};

export type Token = {
    access_token: string;
    refresh_token?: (string | null);
    token_type?: string;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    first_name?: (string | null);
    last_name?: (string | null);
    password: string;
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    first_name?: (string | null);
    last_name?: (string | null);
    id: string;
    language_id?: (number | null);
    is_staff?: boolean;
    is_teacher?: boolean;
    description?: (string | null);
    description_short?: (string | null);
    is_profile_private?: boolean;
    avatar_image?: (string | null);
    cover_image?: (string | null);
    city?: string;
    date_joined: string;
    courses_count?: number;
    website_url?: (string | null);
    telegram_url?: (string | null);
    github_url?: (string | null);
    youtube_url?: (string | null);
};

export type UserRegister = {
    email: string;
    password: string;
    first_name?: (string | null);
    last_name?: (string | null);
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
    first_name?: (string | null);
    last_name?: (string | null);
    password?: (string | null);
    description?: (string | null);
    description_short?: (string | null);
    city?: (string | null);
};

export type UserUpdateMe = {
    first_name?: (string | null);
    last_name?: (string | null);
    email?: (string | null);
    city?: (string | null);
    description?: (string | null);
    description_short?: (string | null);
    website_url?: (string | null);
    telegram_url?: (string | null);
    github_url?: (string | null);
    youtube_url?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type CategoriesReadCategoriesData = {
    limit?: number;
    skip?: number;
};

export type CategoriesReadCategoriesResponse = (CategoriesPublic);

export type CategoriesReadMetaCategoriesByCategoryData = {
    categoryId: string;
    limit?: number;
    skip?: number;
};

export type CategoriesReadMetaCategoriesByCategoryResponse = (MetaCategoriesWithChildrenPublic);

export type ContentUploadContentImageData = {
    formData: Body_content_upload_content_image;
};

export type ContentUploadContentImageResponse = (unknown);

export type ContentDeleteContentImageData = {
    imageUrl: string;
};

export type ContentDeleteContentImageResponse = (unknown);

export type CoursesCreateCourseData = {
    requestBody: CourseCreate;
};

export type CoursesCreateCourseResponse = (CoursePublic);

export type CoursesReadCoursesData = {
    categoryId?: (string | null);
    difficultyLevel?: (number | null);
    languageId?: (number | null);
    limit?: number;
    metaCategoryId?: (string | null);
    q?: (string | null);
    skip?: number;
    subcategoryId?: (string | null);
};

export type CoursesReadCoursesResponse = (CoursesPublic);

export type CoursesReadFavoriteCoursesData = {
    limit?: number;
    skip?: number;
};

export type CoursesReadFavoriteCoursesResponse = (CoursesPublic);

export type CoursesReadMyCoursesData = {
    limit?: number;
    skip?: number;
};

export type CoursesReadMyCoursesResponse = (CoursesPublic);

export type CoursesReadAuthorCoursesData = {
    limit?: number;
    skip?: number;
};

export type CoursesReadAuthorCoursesResponse = (CoursesPublic);

export type CoursesPublishCourseData = {
    courseId: string;
};

export type CoursesPublishCourseResponse = ({
    [key: string]: (string);
});

export type CoursesReadCourseByIdData = {
    courseId: string;
};

export type CoursesReadCourseByIdResponse = (CoursePublic);

export type CoursesUpdateCourseData = {
    courseId: string;
    requestBody: CourseUpdate;
};

export type CoursesUpdateCourseResponse = (CoursePublic);

export type CoursesAddToFavoritesData = {
    courseId: string;
};

export type CoursesAddToFavoritesResponse = ({
    [key: string]: (string);
});

export type CoursesRemoveFromFavoritesData = {
    courseId: string;
};

export type CoursesRemoveFromFavoritesResponse = ({
    [key: string]: (string);
});

export type CoursesEnrollCourseData = {
    courseId: string;
};

export type CoursesEnrollCourseResponse = ({
    [key: string]: (string);
});

export type CoursesUnenrollCourseData = {
    courseId: string;
};

export type CoursesUnenrollCourseResponse = ({
    [key: string]: (string);
});

export type CoursesReadCourseLearnLinesData = {
    courseId: string;
};

export type CoursesReadCourseLearnLinesResponse = (Array<(string)>);

export type CoursesReadCourseDescriptionBlocksData = {
    courseId: string;
};

export type CoursesReadCourseDescriptionBlocksResponse = (Array<{
    [key: string]: unknown;
}>);

export type CoursesUploadCourseCoverData = {
    courseId: string;
    formData: Body_courses_upload_course_cover;
};

export type CoursesUploadCourseCoverResponse = (CoursePublic);

export type CoursesDeleteCourseCoverData = {
    courseId: string;
};

export type CoursesDeleteCourseCoverResponse = (CoursePublic);

export type LanguagesReadLanguagesData = {
    limit?: number;
    skip?: number;
};

export type LanguagesReadLanguagesResponse = (LanguagesPublic);

export type LessonsReadLessonData = {
    lessonId: string;
};

export type LessonsReadLessonResponse = (LessonPublic);

export type LessonsUpdateLessonData = {
    lessonId: string;
    requestBody: LessonUpdate;
};

export type LessonsUpdateLessonResponse = (LessonPublic);

export type LessonsDeleteLessonData = {
    lessonId: string;
};

export type LessonsDeleteLessonResponse = ({
    [key: string]: (string);
});

export type LessonsUploadLessonCoverData = {
    formData: Body_lessons_upload_lesson_cover;
    lessonId: string;
};

export type LessonsUploadLessonCoverResponse = (LessonPublic);

export type LessonsDeleteLessonCoverData = {
    lessonId: string;
};

export type LessonsDeleteLessonCoverResponse = (LessonPublic);

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginRefreshAccessTokenData = {
    refreshToken: string;
};

export type LoginRefreshAccessTokenResponse = (Token);

export type LoginRevokeRefreshTokenData = {
    refreshToken: string;
};

export type LoginRevokeRefreshTokenResponse = (Message);

export type LoginTestTokenResponse = (UserPublic);

export type LoginRecoverPasswordData = {
    email: string;
};

export type LoginRecoverPasswordResponse = (Message);

export type LoginResetPasswordData = {
    requestBody: NewPassword;
};

export type LoginResetPasswordResponse = (Message);

export type LoginRecoverPasswordHtmlContentData = {
    email: string;
};

export type LoginRecoverPasswordHtmlContentResponse = (string);

export type ModulesReadCourseModulesData = {
    courseId: string;
};

export type ModulesReadCourseModulesResponse = (Array<ModuleWithLessons>);

export type ModulesCreateModuleData = {
    courseId: string;
    requestBody: ModuleCreate;
};

export type ModulesCreateModuleResponse = (ModulePublic);

export type ModulesReadModuleData = {
    moduleId: string;
};

export type ModulesReadModuleResponse = (ModulePublic);

export type ModulesUpdateModuleData = {
    moduleId: string;
    requestBody: ModuleUpdate;
};

export type ModulesUpdateModuleResponse = (ModulePublic);

export type ModulesDeleteModuleData = {
    moduleId: string;
};

export type ModulesDeleteModuleResponse = ({
    [key: string]: (string);
});

export type ModulesCreateLessonInModuleData = {
    moduleId: string;
    requestBody: LessonCreate;
};

export type ModulesCreateLessonInModuleResponse = (LessonPublic);

export type PrivateCreateUserData = {
    requestBody: PrivateUserCreate;
};

export type PrivateCreateUserResponse = (UserPublic);

export type StepsReadLessonStepsData = {
    lessonId: string;
};

export type StepsReadLessonStepsResponse = (Array<StepPublic>);

export type StepsCreateStepData = {
    lessonId: string;
    requestBody: StepCreate;
};

export type StepsCreateStepResponse = (StepPublic);

export type StepsReadStepData = {
    lessonId: string;
    stepId: string;
};

export type StepsReadStepResponse = (StepPublic);

export type StepsUpdateStepData = {
    lessonId: string;
    requestBody: StepUpdate;
    stepId: string;
};

export type StepsUpdateStepResponse = (StepPublic);

export type StepsDeleteStepData = {
    lessonId: string;
    stepId: string;
};

export type StepsDeleteStepResponse = (unknown);

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersCreateUserData = {
    requestBody: UserCreate;
};

export type UsersCreateUserResponse = (UserPublic);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersDeleteUserMeResponse = (Message);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersUpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type UsersUpdatePasswordMeResponse = (Message);

export type UsersSetLanguageMeData = {
    requestBody: SetLanguage;
};

export type UsersSetLanguageMeResponse = (UserPublic);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserPublic);

export type UsersDeleteUserData = {
    userId: string;
};

export type UsersDeleteUserResponse = (Message);

export type UsersUploadAvatarMeData = {
    formData: Body_users_upload_avatar_me;
};

export type UsersUploadAvatarMeResponse = (UserPublic);

export type UsersDeleteAvatarMeResponse = (UserPublic);

export type UsersUploadCoverMeData = {
    formData: Body_users_upload_cover_me;
};

export type UsersUploadCoverMeResponse = (UserPublic);

export type UsersDeleteCoverMeResponse = (UserPublic);

export type UtilsTestEmailData = {
    emailTo: string;
};

export type UtilsTestEmailResponse = (Message);

export type UtilsHealthCheckResponse = (boolean);