// This file is auto-generated by @hey-api/openapi-ts

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type Body_users_upload_avatar_me = {
    file: (Blob | File);
};

export type Body_users_upload_cover_me = {
    file: (Blob | File);
};

export type CategoriesPublic = {
    data: Array<CategoryPublic>;
    count: number;
};

export type CategoryPublic = {
    name: string;
    id: string;
};

export type CoursePublic = {
    title: string;
    cover_image?: (string | null);
    description?: (string | null);
    description_video?: (string | null);
    hours_week?: (number | null);
    hours_total?: (number | null);
    has_certificate?: boolean;
    difficulty_level?: DifficultyLevel;
    id: string;
    datetime_create: string;
    datetime_update: string;
    author_id: string;
    language_id: number;
    category_id?: (string | null);
    subcategory_id?: (string | null);
    is_favorite?: boolean;
    students_count?: number;
    is_enrolled?: boolean;
};

export type CoursesPublic = {
    data: Array<CoursePublic>;
    count: number;
};

export type DifficultyLevel = 1 | 2 | 3;

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type LanguagePublic = {
    name: string;
    code: string;
    id: number;
};

export type LanguagesPublic = {
    data: Array<LanguagePublic>;
    count: number;
};

export type Message = {
    message: string;
};

export type MetaCategoriesWithChildrenPublic = {
    data: Array<MetaCategoryWithSubcategoriesPublic>;
    count: number;
};

export type MetaCategoryWithSubcategoriesPublic = {
    name: string;
    id: string;
    category_id: string;
    subcategories?: Array<SubcategoryPublic>;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type PrivateUserCreate = {
    email: string;
    password: string;
    first_name?: (string | null);
    last_name?: (string | null);
    is_verified?: boolean;
};

export type SetLanguage = {
    language_id?: (number | null);
};

export type SubcategoryPublic = {
    name: string;
    id: string;
    category_id: string;
    meta_category_id?: (string | null);
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    first_name?: (string | null);
    last_name?: (string | null);
    password: string;
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    first_name?: (string | null);
    last_name?: (string | null);
    id: string;
    language_id?: (number | null);
    is_staff?: boolean;
    is_teacher?: boolean;
    description?: (string | null);
    description_short?: (string | null);
    is_profile_private?: boolean;
    avatar_image?: (string | null);
    cover_image?: (string | null);
    city?: string;
    date_joined: string;
    courses_count?: number;
    website_url?: (string | null);
    telegram_url?: (string | null);
    github_url?: (string | null);
    youtube_url?: (string | null);
};

export type UserRegister = {
    email: string;
    password: string;
    first_name?: (string | null);
    last_name?: (string | null);
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
    first_name?: (string | null);
    last_name?: (string | null);
    password?: (string | null);
    description?: (string | null);
    description_short?: (string | null);
    city?: (string | null);
};

export type UserUpdateMe = {
    first_name?: (string | null);
    last_name?: (string | null);
    email?: (string | null);
    city?: (string | null);
    description?: (string | null);
    description_short?: (string | null);
    website_url?: (string | null);
    telegram_url?: (string | null);
    github_url?: (string | null);
    youtube_url?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type CategoriesReadCategoriesData = {
    limit?: number;
    skip?: number;
};

export type CategoriesReadCategoriesResponse = (CategoriesPublic);

export type CategoriesReadMetaCategoriesByCategoryData = {
    categoryId: string;
    limit?: number;
    skip?: number;
};

export type CategoriesReadMetaCategoriesByCategoryResponse = (MetaCategoriesWithChildrenPublic);

export type CoursesReadCoursesData = {
    categoryId?: (string | null);
    difficultyLevel?: (number | null);
    languageId?: (number | null);
    limit?: number;
    metaCategoryId?: (string | null);
    q?: (string | null);
    skip?: number;
    subcategoryId?: (string | null);
};

export type CoursesReadCoursesResponse = (CoursesPublic);

export type CoursesReadFavoriteCoursesData = {
    limit?: number;
    skip?: number;
};

export type CoursesReadFavoriteCoursesResponse = (CoursesPublic);

export type CoursesReadMyCoursesData = {
    limit?: number;
    skip?: number;
};

export type CoursesReadMyCoursesResponse = (CoursesPublic);

export type CoursesReadCourseByIdData = {
    courseId: string;
};

export type CoursesReadCourseByIdResponse = (CoursePublic);

export type CoursesAddToFavoritesData = {
    courseId: string;
};

export type CoursesAddToFavoritesResponse = ({
    [key: string]: (string);
});

export type CoursesRemoveFromFavoritesData = {
    courseId: string;
};

export type CoursesRemoveFromFavoritesResponse = ({
    [key: string]: (string);
});

export type CoursesEnrollCourseData = {
    courseId: string;
};

export type CoursesEnrollCourseResponse = ({
    [key: string]: (string);
});

export type CoursesUnenrollCourseData = {
    courseId: string;
};

export type CoursesUnenrollCourseResponse = ({
    [key: string]: (string);
});

export type CoursesReadCourseLearnLinesData = {
    courseId: string;
};

export type CoursesReadCourseLearnLinesResponse = (Array<(string)>);

export type CoursesReadCourseDescriptionBlocksData = {
    courseId: string;
};

export type CoursesReadCourseDescriptionBlocksResponse = (Array<{
    [key: string]: unknown;
}>);

export type LanguagesReadLanguagesData = {
    limit?: number;
    skip?: number;
};

export type LanguagesReadLanguagesResponse = (LanguagesPublic);

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginTestTokenResponse = (UserPublic);

export type LoginRecoverPasswordData = {
    email: string;
};

export type LoginRecoverPasswordResponse = (Message);

export type LoginResetPasswordData = {
    requestBody: NewPassword;
};

export type LoginResetPasswordResponse = (Message);

export type LoginRecoverPasswordHtmlContentData = {
    email: string;
};

export type LoginRecoverPasswordHtmlContentResponse = (string);

export type PrivateCreateUserData = {
    requestBody: PrivateUserCreate;
};

export type PrivateCreateUserResponse = (UserPublic);

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersCreateUserData = {
    requestBody: UserCreate;
};

export type UsersCreateUserResponse = (UserPublic);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersDeleteUserMeResponse = (Message);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersUpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type UsersUpdatePasswordMeResponse = (Message);

export type UsersSetLanguageMeData = {
    requestBody: SetLanguage;
};

export type UsersSetLanguageMeResponse = (UserPublic);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserPublic);

export type UsersDeleteUserData = {
    userId: string;
};

export type UsersDeleteUserResponse = (Message);

export type UsersUploadAvatarMeData = {
    formData: Body_users_upload_avatar_me;
};

export type UsersUploadAvatarMeResponse = (UserPublic);

export type UsersDeleteAvatarMeResponse = (UserPublic);

export type UsersUploadCoverMeData = {
    formData: Body_users_upload_cover_me;
};

export type UsersUploadCoverMeResponse = (UserPublic);

export type UsersDeleteCoverMeResponse = (UserPublic);

export type UtilsTestEmailData = {
    emailTo: string;
};

export type UtilsTestEmailResponse = (Message);

export type UtilsHealthCheckResponse = (boolean);